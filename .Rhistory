find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
source('~/Personal/Coursera/MachineLearning/Project/projectScratch.R')
baseGLM
baseTree
baseGLPPCA
baseGLMPCA
confusionMatrix(predict(baseGLM),pmlTrainT$classe)
myPred <- predict(baseGLM)
myPred <- predict(baseGLM$finalModel)
myPred <- predict(baseGLM,pmlTrainT)
confusionMatrix(myPred, pmlTrainT$classe)
str(myPred)
length(myPred)
baseGLM$finalModel
?ppredict
?predict
str(newGLM)
str(baseGLM)
predict.glm(baseGLM)
predict.glm(baseGLM,newdata=pmlTrainT)
predict.glmnet(baseGLM, newx = pmlTrainT)
?predict.glmnet
class(baseGLM)
myPred <- predict.glmnet(baseGLM, newx = pmlTrainT, type="link")
predict(baseGLM, type="response")
?glmnet
?glm
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
help(package = "AppliedPredictiveModeling")
sO <- data(segmentationOriginal)
library(AppliedPredictiveModeling)
sO <- data(segmentationOriginal)
str(sO)
head(segmentationOriginal)
str(segmentationOriginal)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
?helpText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
library(AppliedPredictiveModeling)
library(caret)
library(lattice)
library(ggplot2)
library(shiny)
help(package="AppliedPredictiveModeling")
data("GermanCredit")
str(GermanCredit)
data(diagnosis)
data(AlzheimerDisease)
str(diagnosis)
dim(diagnosis)
length(diagnosis)
Alzheimer <- cbind(predictors, diagnosis)
str(Alzheimer)
names(Alzheimer)
?cbind
?GermanCredit
help(package="caret")
help(package="AppliedPredictiveModeling")
install.packages("DWD")
data("segmentationData")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?radioButtons
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?train
?trainControl
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
data(diagnosis)
names(GermanCredit)
str(GermanCredit)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
help(library="shiny")
help(package="shiny")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?proc.time
?renderPrint
?printInput
?printOutput
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?switch
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?trControl
?trainControl
?train
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?formula
-TRUE
-FALSE
TRUE
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
splitter <- createDatapartition(Alzheimer$diagnosis,p=.7,list=FALSE)
splitter <- createDataPartition(Alzheimer$diagnosis,p=.7,list=FALSE)
trainAlz <- Alzheimer[splitter,]
testAlz <- Alzheimer[-splitter,]
head(splitter)
head(splitter(20))
head(splitter,20)
head(-splitter,20)
myTrain <- trainControl(method="cv",number=10)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainALZ)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainAlz)
mdl2 <- train(diagnosis~., method="glm", trControl=myTrain, data=trainAlz)
mdl2
warnings()
mdl2 <- train(diagnosis~., method="glm", family="binomial",trControl=myTrain, data=trainAlz)
mdl1
mdl2$finalModel
mdl2$times
?confusionMatrix
warnings()
names(Alzheimer)
?glm
mdl2 <- train(diagnosis~., method="glm", family=binomial(),trControl=myTrain, data=trainAlz)
mdl2
warnings
warnings()
str(diagnosis)
str(Alzheimer$diagnosis)
str(predictors)
str(Alzheimer)
defTrain <- trainControl()
mdl2a <- train(diagnosis~., method="glm", family=binomial(),trControl=defTrain, data=trainAlz)
warnings()
confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
confusionMatrix(predict(mdl1,testAlz),testAlz$diagnosis)
mdl2a <- train(diagnosis~., method="glm",trControl=defTrain, data=trainAlz)
mdl2a
mdl2
mdl3 <- train(diagnosis~., method="glmboost",trControl=myTrain, data=trainAlz)
mdl3
mdl4 <- train(diagnosis~., method="rf",trControl=myTrain, data=trainAlz)
mdl4
mdl4$times
mdl4$times$everything[3]
mdl4$times$everything[[3]
]
?rrenderText
?renderText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
tryPerf <- cbind(Alzheimer, diag2 = diagnosis)
names(tryPerf)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=diag2,trControl=myTrain)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=tryPerf,trControl=myTrain)
warnings()
mod5
?glmboost
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=trainAlz,trControl=myTrain)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?renderPrint
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl2$results
cm2 <- confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
cm2$overall
?reactive
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$results
mdl3$bestTune
mdl3$modelInfo
mdl3$modelInfo()
mdl3$pred
mdl3$resample$Accuracy
mean(mdl3$resample$Accuracy)
mdl3
mdl1$resample$Accuracy
mdl2$resample$Accuracy
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?resamples
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$resample$Kappa
mdl3$resample$Resample
?boxplot
?if
? if
? "if"
? elseif
? elfi
? elif
? "else if"
pwd()
getwd()
packageVersion('swirl')
packageVersion("swirl")
install.packages("swirl")
packageVersion("swirl")
packageVersion('swirl')
library(swirl)
install_course("Advanced R Programming")
x <- 1
x
x[3] <- 4
x
NA + 2
is.na(x[5])
x
?dim
q <- data.frame(a = c(1,2,3), b = c(4,5,6))
dim(q)
dim(q)[1]
round(8.6)
sum(q)
sum(q,1)
?sum
summarize(q)
summary(q)
rowSums(q)
q
colSums(q)
str(colSums(q))
data.frame(colsums(q))
data.frame(colSums(q))
?summarize
?Summarize
?Summary
?summary
getwd()
library(dplyr)
orders <- read.csv('orders_test.csv', stringsAsFactors = FALSE)
head(orders)
?summarize
hmm <- orders[,c('Time','K155','K725', 'K20L')]
hmm <- group_by(hmm, Time)
hmm
hmm <- orders[,c('Time','K155','K725', 'K20L')] %>% group_by(Time) %>% summarise(sum())
hmm
hmm <- orders[,c('Time','K155','K725', 'K20L')] %>% group_by(Time) %>% summarise()
hmm
?group_by
hmm <- orders[,c('Time','K155','K725', 'K20L')] %>% group_by(Time) %>% sum()
hmm
?summarise_all
hmm <- orders[,c('Time','K155','K725', 'K20L')] %>% group_by(Time) %>% summarise_all()
hmm <- orders[,c('Time','K155','K725', 'K20L')] %>% group_by(Time) %>% summarise_all(sum())
hmm <- orders[,c('Time','K155','K725', 'K20L')] %>% group_by(Time) %>% summarise_all(sum)
hmm
str(hmm)
as.data.frame(hmm)
hmm[hmm$Time == 125,]
hmm[hmm$Time == 125,]<-c(0,0,0)
hmm[hmm$Time == 125,]<-c(125,0,0,0)
hmmm
hmm
as.data.frame(hmm)
hmm[hmm$Time == 125,1]
as.data.frame(hmm[hmm$Time == 125,1])
?is.empty
dim(as.data.frame(hmm))
dim(as.data.frame(hmm[hmm$Time == 125,1]))
?setRefClass
test_x <- data.frame(a = numeric(), b = numeric)
test_x <- data.frame(a = numeric(), b = numeric())
test_x
test_x <- rbind(test_x, c(1,1))
test_x
?ceiling
hmm
q
?summarize_at
summarize_at(q, a, sum)
summarize_at(q, 'a', sum)
qq <- data.frame()
summarize(qq)
hmm$ab <- c('a','b')
hmm
?rep
source('~/Personal/MAco/distribution_model_scratch.R')
hmm[['K155']]
hmm[[c('K155','K725')]]
source('~/Personal/MAco/distribution_model_scratch.R')
x <- empty_ship
x
x[1] <- rep(0, dim(x)[2])
x[1,] <- rep(0, dim(x)[2])
x
x[['K155']] <- 1
x
sum(x[x$Distributor==6,])
sum(x[x$Distributor==6,'K155'])
fill_ship <- function(partial) {
# specialized for completing the rest of an order:
# partial has to be a single-row data frame with its column names
# a subset of the empty ship names
out_order <- empty_ship
out_order[1,] <- rep(0, dim(out_order)[2])
out_order[1,colnames(partial)] <- partial[1,]
}
fill_ship(x)
x
fill_ship <- function(partial) {
# specialized for completing the rest of an order:
# partial has to be a single-row data frame with its column names
# a subset of the empty ship names
out_order <- empty_ship
out_order[1,] <- rep(0, dim(out_order)[2])
out_order[1,colnames(partial)] <- partial[1,]
return(out_order)
}
fill_ship(x)
y <- x[1,1:2]
fill_ship(y)
source('~/Personal/MAco/distribution_model_scratch.R')
rbind(empty_ship, empty_ship)
rbind(empty_ship, fill_ship(y))
keg_types = c('K155', 'K725', 'K20L')
x <- data.frame(keg_types)
x
?data.frame
data.frame(1, 1:10)
return()
q <- data.frame()
for(k in keg_types) q[k] <- numeric()
q
?suppressWarnings
getOption('warn')
options('warn')
?options
q[1,] <- c(1,1,1)
qp2,] <- c(2,2,2)
q[2,] <- c(2,2,2)
q
q %>% summarize_all(sum)
library(dplyr)
q %>% summarize_all(sum)
q[q$k155==2,1] <- 3
q
x <- q
x$K155 <- c(1,2,3,4,5)
x[['123']]
rep(NA, 12)
x
dim(x)
xim(x) <- 5,3
dim(x) <- c(5,3)
blank_pipeline = data.frame(Time = numeric(), K155 = numeric(),
K725 = numeric(), K20L = numeric())
x <- blank_pipeline
x$Time <- c(1,2,3)
a <- {y <- 1, z <- 2}
a <- {y <- 1 z <- 2}
a <- {y <- 1
z <- 2}
y
z
a
eval(a)
x <- data.frame()
x$a <- c(1,2)
empty_order <- data.frame(Distributor = character())
for(k in keg_types) empty_order[[k]] <- numeric()
empty_order
?paste
?c
q
q[K155==3,]
q[q$K155==3,]
w <- q[3,2,1]
w
w
w <- q[,c(3,2,1)]
w
rbind(q,w)
w[2,1] <- 8
w
rbind(q,w)
c('guess',2)
x = data.frame(a=1,b=2,c=3)
x[['a']]
getOptions('warn')
getOption('warn')
?`<<-`
x <- data.frame(a = 1, b = 2, c = 3)
sum(x)
max(20, c(20,40,60))
?max
pmax(20, c(20,40,60))
pmax(20, c(20,40,10))
?which.max
x
x * 8
blank_pipeline = data.frame(Time = numeric())
for(k in keg_types) blank_pipeline[[k]] <- numeric()
keg_types = c('K155', 'K725', 'K20L')
blank_pipeline = data.frame(Time = numeric())
for(k in keg_types) blank_pipeline[[k]] <- numeric()
rbind(blank_pipeline, blank_pipeline)
rownames(x)
rownames(x) <- NULL
x
rownames(x)
library(microbenchmark)
isntall.packages('microbenchmark')
install.packages('microbenchmark')
rdf <- data.frame(a = runif(1000), b = runif(1000), c = runif(1000))
?microbenchmark
colSums(rdf)
str(colSums(rdf))
as.data.frame(colSums(rdf))
library(dplyr)
microbenchmark(colsums(rdf), summarize_all(rdf, sum))
library(microbenchmark)
microbenchmark(colsums(rdf), summarize_all(rdf, sum))
microbenchmark(colSums(rdf), summarize_all(rdf, sum))
microbenchmark(colSums(rdf), as.data.frame(summarize_all(rdf, sum)))
rdf$group = c('a','b')
aggregate(. ~ group, rdf, FUN = sum)
str(aggregate(. ~ group, rdf, FUN = sum))
microbenchmark(aggregate(.~group, rdf, FUN = sum), as.data.frame(rdf %>% group_by(group) %>% summarize_all(sum)))
q <- colSums(rdf[,c('a','b','c')])
q
q[c('b','c','a')]
rdf
rownames(rdf) <- LETTERS
rownames(rdf) <- rep(LETTERS,100)[1:1000]
q
q <- aggregate(.~group, rdf, sum)
q
rownames(q) <- c('x','y')
q
q['a']
q['x',]
install.packages('knitr')
install.packages('rmarkdown')
options(repos = c(CRAN = "https://mran.revolutionanalytics.com/snapshot/2017-02-01"))
install.packages('rmarkdown')
install.packages('knitr')
install.packages(c("BH", "car", "caret", "colorspace", "curl", "DBI", "digest", "ggplot2", "httr", "jsonlite", "kernlab", "lubridate", "maps", "mime", "openssl", "proto", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr", "tibble", "tidyr", "yaml"))
3 % 5
3 %% 5
-3 %% 5
-6 %% 5
-12 %% 5
-5 %% 5
setwd("~/Personal/HPGC/Fouball Matches/HPGC4ball")

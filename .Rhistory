find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
source('~/Personal/Coursera/MachineLearning/Project/projectScratch.R')
baseGLM
baseTree
baseGLPPCA
baseGLMPCA
confusionMatrix(predict(baseGLM),pmlTrainT$classe)
myPred <- predict(baseGLM)
myPred <- predict(baseGLM$finalModel)
myPred <- predict(baseGLM,pmlTrainT)
confusionMatrix(myPred, pmlTrainT$classe)
str(myPred)
length(myPred)
baseGLM$finalModel
?ppredict
?predict
str(newGLM)
str(baseGLM)
predict.glm(baseGLM)
predict.glm(baseGLM,newdata=pmlTrainT)
predict.glmnet(baseGLM, newx = pmlTrainT)
?predict.glmnet
class(baseGLM)
myPred <- predict.glmnet(baseGLM, newx = pmlTrainT, type="link")
predict(baseGLM, type="response")
?glmnet
?glm
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
help(package = "AppliedPredictiveModeling")
sO <- data(segmentationOriginal)
library(AppliedPredictiveModeling)
sO <- data(segmentationOriginal)
str(sO)
head(segmentationOriginal)
str(segmentationOriginal)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
?helpText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
library(AppliedPredictiveModeling)
library(caret)
library(lattice)
library(ggplot2)
library(shiny)
help(package="AppliedPredictiveModeling")
data("GermanCredit")
str(GermanCredit)
data(diagnosis)
data(AlzheimerDisease)
str(diagnosis)
dim(diagnosis)
length(diagnosis)
Alzheimer <- cbind(predictors, diagnosis)
str(Alzheimer)
names(Alzheimer)
?cbind
?GermanCredit
help(package="caret")
help(package="AppliedPredictiveModeling")
install.packages("DWD")
data("segmentationData")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?radioButtons
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?train
?trainControl
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
data(diagnosis)
names(GermanCredit)
str(GermanCredit)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
help(library="shiny")
help(package="shiny")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?proc.time
?renderPrint
?printInput
?printOutput
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?switch
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?trControl
?trainControl
?train
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?formula
-TRUE
-FALSE
TRUE
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
splitter <- createDatapartition(Alzheimer$diagnosis,p=.7,list=FALSE)
splitter <- createDataPartition(Alzheimer$diagnosis,p=.7,list=FALSE)
trainAlz <- Alzheimer[splitter,]
testAlz <- Alzheimer[-splitter,]
head(splitter)
head(splitter(20))
head(splitter,20)
head(-splitter,20)
myTrain <- trainControl(method="cv",number=10)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainALZ)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainAlz)
mdl2 <- train(diagnosis~., method="glm", trControl=myTrain, data=trainAlz)
mdl2
warnings()
mdl2 <- train(diagnosis~., method="glm", family="binomial",trControl=myTrain, data=trainAlz)
mdl1
mdl2$finalModel
mdl2$times
?confusionMatrix
warnings()
names(Alzheimer)
?glm
mdl2 <- train(diagnosis~., method="glm", family=binomial(),trControl=myTrain, data=trainAlz)
mdl2
warnings
warnings()
str(diagnosis)
str(Alzheimer$diagnosis)
str(predictors)
str(Alzheimer)
defTrain <- trainControl()
mdl2a <- train(diagnosis~., method="glm", family=binomial(),trControl=defTrain, data=trainAlz)
warnings()
confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
confusionMatrix(predict(mdl1,testAlz),testAlz$diagnosis)
mdl2a <- train(diagnosis~., method="glm",trControl=defTrain, data=trainAlz)
mdl2a
mdl2
mdl3 <- train(diagnosis~., method="glmboost",trControl=myTrain, data=trainAlz)
mdl3
mdl4 <- train(diagnosis~., method="rf",trControl=myTrain, data=trainAlz)
mdl4
mdl4$times
mdl4$times$everything[3]
mdl4$times$everything[[3]
]
?rrenderText
?renderText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
tryPerf <- cbind(Alzheimer, diag2 = diagnosis)
names(tryPerf)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=diag2,trControl=myTrain)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=tryPerf,trControl=myTrain)
warnings()
mod5
?glmboost
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=trainAlz,trControl=myTrain)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?renderPrint
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl2$results
cm2 <- confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
cm2$overall
?reactive
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$results
mdl3$bestTune
mdl3$modelInfo
mdl3$modelInfo()
mdl3$pred
mdl3$resample$Accuracy
mean(mdl3$resample$Accuracy)
mdl3
mdl1$resample$Accuracy
mdl2$resample$Accuracy
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?resamples
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$resample$Kappa
mdl3$resample$Resample
?boxplot
setwd("~/Personal/HPGC/Fouball Matches/HPGC4ball")

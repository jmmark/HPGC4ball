find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
source('~/Personal/Coursera/MachineLearning/Project/projectScratch.R')
baseGLM
baseTree
baseGLPPCA
baseGLMPCA
confusionMatrix(predict(baseGLM),pmlTrainT$classe)
myPred <- predict(baseGLM)
myPred <- predict(baseGLM$finalModel)
myPred <- predict(baseGLM,pmlTrainT)
confusionMatrix(myPred, pmlTrainT$classe)
str(myPred)
length(myPred)
baseGLM$finalModel
?ppredict
?predict
str(newGLM)
str(baseGLM)
predict.glm(baseGLM)
predict.glm(baseGLM,newdata=pmlTrainT)
predict.glmnet(baseGLM, newx = pmlTrainT)
?predict.glmnet
class(baseGLM)
myPred <- predict.glmnet(baseGLM, newx = pmlTrainT, type="link")
predict(baseGLM, type="response")
?glmnet
?glm
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
help(package = "AppliedPredictiveModeling")
sO <- data(segmentationOriginal)
library(AppliedPredictiveModeling)
sO <- data(segmentationOriginal)
str(sO)
head(segmentationOriginal)
str(segmentationOriginal)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
?helpText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
library(AppliedPredictiveModeling)
library(caret)
library(lattice)
library(ggplot2)
library(shiny)
help(package="AppliedPredictiveModeling")
data("GermanCredit")
str(GermanCredit)
data(diagnosis)
data(AlzheimerDisease)
str(diagnosis)
dim(diagnosis)
length(diagnosis)
Alzheimer <- cbind(predictors, diagnosis)
str(Alzheimer)
names(Alzheimer)
?cbind
?GermanCredit
help(package="caret")
help(package="AppliedPredictiveModeling")
install.packages("DWD")
data("segmentationData")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/myShiny')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?radioButtons
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?train
?trainControl
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
data(diagnosis)
names(GermanCredit)
str(GermanCredit)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
help(library="shiny")
help(package="shiny")
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?proc.time
?renderPrint
?printInput
?printOutput
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?switch
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?trControl
?trainControl
?train
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?formula
-TRUE
-FALSE
TRUE
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
splitter <- createDatapartition(Alzheimer$diagnosis,p=.7,list=FALSE)
splitter <- createDataPartition(Alzheimer$diagnosis,p=.7,list=FALSE)
trainAlz <- Alzheimer[splitter,]
testAlz <- Alzheimer[-splitter,]
head(splitter)
head(splitter(20))
head(splitter,20)
head(-splitter,20)
myTrain <- trainControl(method="cv",number=10)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainALZ)
mdl1 <- train(diagnosis~., method="rpart", trControl=myTrain, data=trainAlz)
mdl2 <- train(diagnosis~., method="glm", trControl=myTrain, data=trainAlz)
mdl2
warnings()
mdl2 <- train(diagnosis~., method="glm", family="binomial",trControl=myTrain, data=trainAlz)
mdl1
mdl2$finalModel
mdl2$times
?confusionMatrix
warnings()
names(Alzheimer)
?glm
mdl2 <- train(diagnosis~., method="glm", family=binomial(),trControl=myTrain, data=trainAlz)
mdl2
warnings
warnings()
str(diagnosis)
str(Alzheimer$diagnosis)
str(predictors)
str(Alzheimer)
defTrain <- trainControl()
mdl2a <- train(diagnosis~., method="glm", family=binomial(),trControl=defTrain, data=trainAlz)
warnings()
confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
confusionMatrix(predict(mdl1,testAlz),testAlz$diagnosis)
mdl2a <- train(diagnosis~., method="glm",trControl=defTrain, data=trainAlz)
mdl2a
mdl2
mdl3 <- train(diagnosis~., method="glmboost",trControl=myTrain, data=trainAlz)
mdl3
mdl4 <- train(diagnosis~., method="rf",trControl=myTrain, data=trainAlz)
mdl4
mdl4$times
mdl4$times$everything[3]
mdl4$times$everything[[3]
]
?rrenderText
?renderText
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
tryPerf <- cbind(Alzheimer, diag2 = diagnosis)
names(tryPerf)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=diag2,trControl=myTrain)
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=tryPerf,trControl=myTrain)
warnings()
mod5
?glmboost
mod5 <- train(diagnosis~., method="glm",family=binomial(),data=trainAlz,trControl=myTrain)
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?renderPrint
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl2$results
cm2 <- confusionMatrix(predict(mdl2,testAlz),testAlz$diagnosis)
cm2$overall
?reactive
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$results
mdl3$bestTune
mdl3$modelInfo
mdl3$modelInfo()
mdl3$pred
mdl3$resample$Accuracy
mean(mdl3$resample$Accuracy)
mdl3
mdl1$resample$Accuracy
mdl2$resample$Accuracy
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
?resamples
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
shiny::runApp('Personal/Coursera/DataProducts/Shiny/shinyProject')
mdl3$resample$Kappa
mdl3$resample$Resample
?boxplot
?sample
groups <- c(rep("a",4),rep("b",4),rep("c",4),rep("d",4),rep("e",4))
groups
sample(groups,20)
seed(200)
set.seed(200)
sample(groups,20)
set.seed(200)
sample(groups,20,replace=FALSE)
?replicate
?rep
rep(c("a","b","c","d","e"),4)
setwd("~/Personal/HPGC/Fouball Matches/HPGC4ball")
?date
date()
Sys.date()
Sys.Date()
format(date(),"%a %b %d")
format(Sys.Date(),"%a %b %d")
format(Sys.Date(),"%b %d, %Y")
format(Sys.time(),"%b %d, %Y %H:%M")
roster <- read.csv("currentRoster.csv")
index <- read.csv("indexResults.csv")
index
?merge
roster <- read.csv("../currentRoster.csv")
index <- read.csv("../indexResults.csv")
roster <- merge(roster, index, by.x="ghin",by.y="ghin")
?kable
?library
library(knitr)
kable(roster)
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
teamNo
?order
teamNo <- teamNo[order(teamNo)]
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
teamNo
roster
lenght(unique(roster[,"Last.Name"]))
length(unique(roster[,"Last.Name"]))
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
?gather
?dplyr::gather
?tidyr::gather
?sample
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
roster
?tidyr
??tidyr
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
roster
?write.csv
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
roster
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
roster
allPool
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
allPool
?spread
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
allPool
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
allPool
allPool[,-"Pool"]
allPool[,-2]
allPool[,-c("Pool")]
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
allPool
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
?read.csv
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
?kable
pooler <- read.csv("poolPlay.csv")
names(pooler) = c("Team","Pool","Player 1","Player 2","Wins","Losses","Ties","Points","Holes Won")
pooler
?read.vsc
?read.csv
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
source('~/Personal/HPGC/Fouball Matches/HPGC4ball/makePools.R')
?substr
substr("+0.1",1,1)
ch <- function(idx) {
if (idx=="NH") return("0")
isPlus = (substr(idx,1,1)=="+")
rating = 124
hin <- as.numeric(idx)
chi = as.character(round(rating/113*hin,0))
if (isPlus && chi != "0") chi <- paste("+",ch)
chi
}
roster <- read.csv("../rosterPools.csv")
index <- read.csv("../indexResults.csv", colClasses = c("numeric","character","character"))
roster <- merge(roster, index, by.x="ghin",by.y="ghin")
roster$index[roster$ghin==999999] <- "NH"
roster <- roster[,c("Name","teamNo","pools","index","asOf")]
roster$'Course Handicap' <- ch(roster$index)
ch <- function(idx) {
isNH <- idx=="NH"
isPlus <- (substr(idx,1,1)=="+")
rating <- 124
hin <- as.numeric(idx)
chi[!isNH] <- as.character(round(rating/113*hin,0))
chi[isPlus] <- paste("+",chi[isPlus])
chi[isNH] <- "0"
chi
}
roster <- read.csv("../rosterPools.csv")
index <- read.csv("../indexResults.csv", colClasses = c("numeric","character","character"))
roster <- merge(roster, index, by.x="ghin",by.y="ghin")
roster$index[roster$ghin==999999] <- "NH"
roster <- roster[,c("Name","teamNo","pools","index","asOf")]
roster$'Course Handicap' <- ch(roster$index)
ch <- function(idx) {
isNH <- idx=="NH"
isPlus <- (substr(idx,1,1)=="+")
rating <- 124
hin <- as.numeric(idx)
chi <- character(length(idx))
chi[!isNH] <- as.character(round(rating/113*hin,0))
chi[isPlus] <- paste("+",chi[isPlus])
chi[isNH] <- "0"
chi
}
roster <- read.csv("../rosterPools.csv")
index <- read.csv("../indexResults.csv", colClasses = c("numeric","character","character"))
roster <- merge(roster, index, by.x="ghin",by.y="ghin")
roster$index[roster$ghin==999999] <- "NH"
roster <- roster[,c("Name","teamNo","pools","index","asOf")]
roster$'Course Handicap' <- ch(roster$index)
roster
ch <- function(idx) {
isNH <- idx=="NH"
isPlus <- (substr(idx,1,1)=="+")
rating <- 124
hin <- as.numeric(idx)
chi <- character(length(idx))
chi[!isNH] <- as.character(round(rating/113*hin,0))
chi[isPlus&&chi!="0"] <- paste("+",chi[isPlus])
chi[isNH] <- "0"
chi
}
roster <- read.csv("../rosterPools.csv")
index <- read.csv("../indexResults.csv", colClasses = c("numeric","character","character"))
roster <- merge(roster, index, by.x="ghin",by.y="ghin")
roster$index[roster$ghin==999999] <- "NH"
print(roster)
roster <- roster[,c("Name","teamNo","pools","index","asOf")]
roster$'Course Handicap' <- ch(roster$index)
ch <- function(idx) {
isNH <- idx=="NH"
isPlus <- (substr(idx,1,1)=="+")
rating <- 124
hin <- as.numeric(idx)
chi <- character(length(idx))
chi[!isNH] <- as.character(round(rating/113*hin,0))
chi[isPlus&&chi!="0"] <- paste("+",chi[isPlus])
chi[isNH] <- "0"
chi
}
roster <- read.csv("../rosterPools.csv")
index <- read.csv("../indexResults.csv", colClasses = c("numeric","character","character"))
roster <- merge(roster, index, by.x="ghin",by.y="ghin")
roster$index[roster$ghin==9999999] <- "NH"
roster <- roster[,c("Name","teamNo","pools","index","asOf")]
roster$'Course Handicap' <- ch(roster$index)
ch <- function(idx) {
isNH <- idx=="NH"
isPlus <- (substr(idx,1,1)=="+")
rating <- 124
hin[!isNH] <- as.numeric(idx[!isNH])
chi <- character(length(idx))
chi[!isNH] <- as.character(round(rating/113*hin[!isNH],0))
chi[isPlus&&chi!="0"] <- paste("+",chi[isPlus])
chi[isNH] <- "0"
chi
}
roster <- read.csv("../rosterPools.csv")
index <- read.csv("../indexResults.csv", colClasses = c("numeric","character","character"))
roster <- merge(roster, index, by.x="ghin",by.y="ghin")
roster$index[roster$ghin==9999999] <- "NH"
roster <- roster[,c("Name","teamNo","pools","index","asOf")]
roster$'Course Handicap' <- ch(roster$index)
